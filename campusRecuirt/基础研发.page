## 数据库相关
- 通用sql语句
    - distinct表示取出不重复的值
    - top/limit like '%g%', 通配符除了%， 还可以用_代替一个字符， [a,b,c] [!a,b,c], 比如like '[!abc]%'表示不以a或者b,c开头的
    - in, 可以高阶
    - between and 注意不同数据库引擎可能不一样
    - join， 比较重要, 分为内连接 inner join & 外连接 (left join, right join, full join)
    - union可以不重复合并， union all 可重复合并
    - select into // select * into new_table from old_table
    - Mysql中primary key， 可以建立联合主键: Constraint pk_XX primary key (id, name), 也可以drop掉， alter table XX drop constraint pk_XX
    - Foreign Key constraint fk_XX foreign key (id) references Persons(id_p)
    - Mysql创建索引, Create unique index XXX on table_name (column_name desc), 单独索引， 也可以多个索引，索引意味着值不能一样。
    - select name, count(name) from XXX group by name order by count(name) desc limit 1;

- 完整性约束
    - 主键不能为空 实体完整性
    - 参照关系中要么为空， 要么等于被参照关系中的主键 参照完整性
    - 用户定义完整性， 定义age < 130

- 四大范式
    - 第一范式， 不允许属性划分
    - 第二范式2NF, 不允许非关键字段对主键的部分函数依赖， 比如(学号, 课程名称) → (姓名, 年龄, 成绩, 学分)， 这个数据库表不满足第二范式，因为存在如下决定关系：(课程名称) → (学分) (学号) → (姓名, 年龄)， 这种冗余带来一些问题， 比如数据冗余存储， 以及更新，插入的问题。 我们可以拆表：　学生：Student(学号, 姓名, 年龄)； 课程：Course(课程名称, 学分)；选课关系：SelectCourse(学号, 课程名称, 成绩)。
    - 第三范式， 不允许非关键字对任何候选码的关键字的传递依赖。 不存在这样的关系: 关键字段 → 非关键字段x → 非关键字段y,  比如这个就存在问题：(学号) → (姓名, 年龄, 所在学院, 学院地点, 学院电话)， 因为(学号) → (所在学院) → (学院地点, 学院电话)， 做法依然拆表
    - BCNF 第三范式中是不存在 关键字段 → 非关键字段x → 非关键字段y， 这个范式要求不存在： 关键字段 → 关键字段x → 非关键字段依赖

- 事务的隔离性理解 （隔离级别 越来越严格)
    - 读未提交， 事务中的修改及时没提交也会被其他事务可见，这样会产生  脏读  ，如果事务失败回滚，则其他事务之前的到的数据则是脏数据。从性能上讲，不比别的事务提高太多，但是极其不安全。

    - 读已提交， 造成 不可重复读，事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变， 主要原因还是在于 第一次 读完之后 没有加锁。。。

    - 可重复读 理解是：现在已经对当前读写的数据都加锁了。。然而！ 虽然我不能修改你加锁的数据， 但是我可以在其他地方添加数据啊， 所以如果你当前的事务是范围扫描的话， 那么就呵呵了。。。。 两次读取不一样， 出现 幻读！            事务T1在读取R1和修改R2，此时T2不能够读取R2也不能修改R1，这样T2的操作就不会影响到T1的操作，但是，如果T1中含有一个统计某个范围内记录数量的操作，而T2在此时正好在此范围内插入了一条记录，则会草成T1的幻读，即第一次读此范围内一共2条数据，而在次读的时候却有了3条数据。

    - 可串行化 字面意思，不表
    
    - [推荐](http://blog.csdn.net/fg2006/article/details/6937413)
    - [推荐](http://blog.csdn.net/liuguangqiang/article/details/52181424)

- Mysql相关
    - 并发控制原因: 保证多个操作并发时的数据一致性。
    - 当然如何选择并发控制策略是跟 隔离级别有关的， mysql默认隔离级别是 可重复读，
    - InnoDb在upd/del的时候使用行锁， select会结合MVCC来保证一致性。 加锁的是索引上。

- 数据库索引相关
    - [Mysql索引原理详解](http://blog.codinglabs.org/articles/theory-of-mysql-index.html)
    - [非常好的索引介绍](http://blog.csdn.net/hguisu/article/details/7786014)
    - B树与B+树的区别
         - 对于B树： 1、根结点至少有两个子女； 2、每个非根节点所包含的关键字个数 j 满足：┌m/2┐ - 1 <= j <= m - 1；
         - 对于B+树:  ┌m/2┐ <= j <= m；
         - B树每个节点不仅索引，而且保存数据， 对于B+树: 1.有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。 2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。

    - 为什么说B+树比B 树更适合实际应用中操作系统的文件索引和数据库索引？[2] 
         - B+树的磁盘读写代价更低
         - B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。
举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。
         
         - B+树的查询效率更加稳定
         - 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。

         - 聚集索引 与 非 聚集索引
         - 聚集索引是指  索引的顺序与索引列的顺序一致，也就是物理顺序一致。。当然因为我们的索引肯定有有序的，所以这种情况下索引列一般也是有序排序（但是非充分的。。毕竟有序这个怎么有序法是自定义的， 聚集索引有利于顺序扫描
         - 而非聚集索引的话， 就不需要啦。。当然需要密集索引。。 索引是连续的。 然而索引仅包含离散的物理指针， 所以顺序扫描就不太行啦。。
         
     - Mysql的innodb引擎是默认使用B+ tree, 然后是把索引跟数据一起存放的， 而myISAM的话是索引放一起， 叶节点加个指向物理数据的指针。


- 数据库主键与外键的区别
    
- 视图详解
    - [here](http://blog.csdn.net/yujin753/article/details/43197941)

- Mysql InnoDB加锁
    - [何登成的解释](http://hedengcheng.com/?p=771)

- Mysql MVCC与加锁实现并发控制
    - [here](http://www.cnblogs.com/yelbosh/p/5813865.html)

- Mysql中Innodb与MyISAM的区别:
    - InnoDB支持事物，而MyISAM不支持事物
    - InnoDB支持行级锁，而MyISAM支持表级锁
    - InnoDB支持MVCC, 而MyISAM不支持
    - InnoDB支持外键，而MyISAM不支持
    - InnoDB不支持全文索引，而MyISAM支持。（X)

- Mysql默认级别是 Repeatable read [参考](http://blog.csdn.net/u012712087/article/details/46402433)

## 操作系统相关
- C语言内存分配
    - 代码区（text segment）。代码区指令根据程序设计流程依次执行，对于顺序指令，则只会执行一次（每个进程），如果反复，则需要使用跳转指令，如果进行递归，则需要借助栈来实现。 代码区的指令中包括操作码和要操作的对象（或对象地址引用）。如果是立即数（即具体的数值，如5），将直接包含在代码中；如果是局部数据，将在栈区分配空间，然后引用该数据地址；如果是BSS区和数据区，在代码中同样将引用该数据地址。
    - 全局初始化数据区/静态数据区（Data Segment）。只初始化一次。
    - 未初始化数据区（BSS）。在运行时改变其值
    - 栈区（stack）。由编译器自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈。每当一个函数被调用，该函数返回地址和一些关于调用的信息，比如某些寄存器的内容，被存储到栈区。然后这个被调用的函数再为它的自动变量和临时变量在栈区上分配空间，这就是C实现函数递归调用的方法。每执行一次递归函数调用，一个新的栈框架就会被使用，这样这个新实例栈里的变量就不会和该函数的另一个实例栈里面的变量混淆。
    - 堆区（heap）。用于动态内存分配。堆在内存中位于bss区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时有可能由OS回收。

- 进程 线程
    - 死锁: 互斥条件 | 请求与保持 | 不剥夺 | 循环等待
    - 堆栈

- 进程间通信有哪几种方式？ 
    - 管道(PIPE)：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。
    - 命名管道(FIFO)：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。 可参考[here](http://blog.csdn.net/ljianhui/article/details/10202699) 
    - 消息队列(MessageQueue)： 消息原语， 直接通信， 间接通信。         消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺限。   可参考[here](http://blog.csdn.net/ljianhui/article/details/10287879)
    - 共享内存(SharedMemory)：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。 
    - 内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。 
    - 信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。 
    - 套接字（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。 

- 同步/异步 与 阻塞/非阻塞
    - 两者不完全等价， 即同步也可以非阻塞，异步也可以非阻塞
    - 同步是指你发起了一个调用之后， 本身是没有返回的， 然而此时他不一定是阻塞的， 也可以去问问干干其他事情啊。。比如打个电话再来轮询一下结果啊。。 
    - 异步就是说，调用之后就可以立马离开， 让他有结果之后打电话告诉我。。比如回调函数
    - 阻塞/非阻塞， 更加关注的是在等待调用结果时候的状态，即发起调用之后会不会阻塞当前队列。。

- Linux分页机制
    - 分页与请求分页
    - 页表(一级页表，太过于占用空间)（页号 + 页内地址）， 二级页表(10 + 10 + 12)
    - 页表地址转换机构
    - TLB
    - 缺页中断 / 页面置换算法(clock -> LRU 最近最少使用的一个加强，按时间检查页面，如果标记为used,标记为unused，否则就直接置换， 一圈之后)
    - 页面抖动(分给进程的物理页数太少， 终止一些进程)

- Linux常用命令
    - ps -aux
    - nohup gititit -l 0.0.0.0 -p 5001 &
    - awk
    - drwxr-xr-x  2 chaotan  staff     68  3 11 17:57 Round2
    - 目录   子目录个数  所属用户 所属用户组  68B  最后修改时间 文件名



## Java相关
- 最基本的问题--Object $\bigstar$$\bigstar$
    - interface不继承object
    - equals() 一般都需要被override
    - finalize() JVM中有个守护进程，在销毁该对象时会自动调用
    - notify() | notifyAll() | wait() 这些方法与lock的关系比较紧密，可以在lock中使用
    - toString() 很常用，一般都需要被override
    - Clone() 默认浅拷贝， 重写它需要implements Cloneable接口
    - getClass() 调用该实例的运行时类
    - hashCode 注意重写equal时， 需要重写hashCode()（定义自己觉得相等的模式， 在这种模式下确保两者hashCode值一样)

- static和final的区别和用途 
     - Static 
     - 修饰变量：静态变量随着类加载时被完成初始化，内存中只有一个，且JVM也只会为它分配一次内存，所有类共享静态变量。 
     - 修饰方法：在类加载的时候就存在，不依赖任何实例；static方法必须实现，不能用abstract修饰。 
     - 修饰代码块：在类加载完之后就会执行代码块中的内容。 

     - Final 
     - 编译期常量：类加载的过程完成初始化，编译后带入到任何计算式中。只能是基本类型。 
     - 运行时常量：基本数据类型或引用数据类型。引用不可变，但引用的对象内容可变。 
     - 修饰方法：不能被继承，不能被子类修改。 
     - 修饰类：不能被继承。 

- 推荐String直接赋值
     - String str = "abc"; 这种方式推荐
     - 否则用new的话， String str = new String("abc"), 这种方式可能会导致系统中出现大量的String对象
     - 因为Java中有个字符串常量池， 每次创建一个字符串的时候，都会先去池中看看有没有字面值相等的字符串， 有的话就返回该对象引用就行
     - 然而使用new创建的时候是不会去check常量池的，而是直接创建一个对象，也不会把这个对象放在常量池中， 所以a == b就会为false
     - JVM的垃圾回收不会对该常量池做回收处理

- HashMap与Hashtable的区别
     - HashMap计算key的hash值时调用单独的方法，在该方法中会判断key是否为null，如果是则返回0；而Hashtable中则直接调用key的hashCode()方法，因此如果key为null，则抛出空指针异常。
     - HashMap不同步， HashTable是线程同步的，因为加了synchronized关键字
     - Hashtable基于Dictionary类， hashMap基于AbstarctMap类
     - Map的遍历 Iterator<Entry<String, String>> it = table.entrySet().iterator(); while(it.hasNext()) {} hashTable与hashMap都可以访问
     - HashMap的内部实现 - [here]()
     
- HashMap和Concurrent HashMap区别？ 
     - HashMap是非线程安全的，CurrentHashMap是线程安全的。 
     - ConcurrentHashMap将整个Hash桶进行了分段segment，也就是将这个大的数组分成了几个小的片段segment，而且每个小的片段segment上面都有锁存在，那么在插入元素的时候就需要先找到应该插入到哪一个片段segment，然后再在这个片段上面进行插入，而且这里还需要获取segment锁。 
     - ConcurrentHashMap让锁的粒度更精细一些，并发性能更好。
 
- JVM生命周期
     - [Here](http://blog.csdn.net/witsmakemen/article/details/28600127/)
     - JVM虚拟机体系结构 参考[here](http://blog.csdn.net/rabbit_in_android/article/details/50382739)
          - 类加载子系统 (class load subsystem) 
          - 类的生命周期：
          - java 类的生命周期就是指一个 class 文件从加载到卸载的全过程     
          - 加载、连接、初始化（Loading, Linking and Initialization）
          - 类加载子系统不仅仅负责定位并加载类文件，他按照以下严格的步骤作了很多其他的事情：（具体的信息参见第七章的“类的生命周期”）
              - 1）、加载：寻找并导入指定类型（类和接口）的二进制信息
              - 2）、连接：进行验证、准备和解析
                   - ①验证：确保导入类型的正确性
                   - ②准备：为类型分配内存并初始化为默认值
                   - ③解析：将字符引用解析为直接引用
              - 3）、初始化：调用Java代码，初始化类变量为正确的初始值
              - 4）、使用
              - 5）、卸载
          - 数据区中一部分是整个程序共享 主要包括方法区 & 堆，其他部分被单独线程控制，每个线程创建时，会被分配PC寄存器 & java堆栈。
   
- JAVA的内存分配！！！！！！！
     - [很好的讲解](http://blog.csdn.net/shimiso/article/details/8595564) JVM的内存应该分成：方法区、栈、堆、本地方法区等，代码段、数据段、常量池应该都在方法区
     -  主要包括方法区 & 堆，其他部分被单独线程控制，每个线程创建时，会被分配PC寄存器 & java堆栈。
     - Java的内存分配都是在JVM中进行的
     - 堆是一个一个java应用共享一个JVM实例，一个实例唯一对应一个堆。 而Java的stack是在某个线程创建时分配给该线程的存储区域。 可参考 [here](http://www.cnblogs.com/Free-Thinker/p/3695989.html)

- [JVM的垃圾回收](http://pengjiaheng.iteye.com/blog/520228)
     - 引用计数， 收集计数为0的对象， 无法处理循环引用
     - 标记-清除， 第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。此算法需要暂停整个应用，同时，会产生内存碎片。
     - 复制   把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中。每次只处理正在使用中的对象，因此复制成本比较小，同时复制过去以后还能进行相应的内存整理，不会出现“碎片”问题。     缺点： 就是需要两倍内存空间。
     - 标记-整理 第一阶段从根节点开始标记所有被引用对象，第二阶段遍历整个堆，把清除未标记对象并且把存活对象“压缩”到堆的其中一块，按顺序排放。此算法避免了“标记-清除”的碎片问题，同时也避免了“复制”算法的空间问题。
     - 分代收集：  分为新生代与老年代  新生代中，每次垃圾收集时都有大批对象死去，只有少量存活，就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集； 老年代中，其存活率较高、没有额外空间对它进行分配担保，就应该使用“标记-整理”或“标记-清理”算法进行回收。

- Java GC/Full GC?
    - ~~[here](http://www.tuicool.com/articles/FbI3En)~~
    - [here is better](http://www.cnblogs.com/little-YTMM/p/5613642.html)

- JVM finalize
    - 什么时候会被调用? 
          - 1.所有对象被Garbage Collection时自动调用,比如运行System.gc()的时候.
          - 2.程序退出时为每个对象调用一次finalize方法。
          - 3.显式的调用finalize方法
    
    - 有什么用处?
          - 一是逃逸? 有时候不想被释放呢还，然而GC觉得要回收你了
          - 强行释放 本地方法， 就是java程序中的非java实现的native方法。。

- Java线程本地变量ThreadLocal
     - [一个简单的例子](http://blog.csdn.net/ghsau/article/details/15732053)
     - 大概就是说， 比如Runnable的话，你创建一个该对象，然后在多个线程之间共享这个Runnable变量，之后各个线程的修改会互相影响。 然而你声明一个ThreadLocal变量之后， 这个变量就只能属于线程内部共享了。 主要原理是： ThreadLocal中是有一个Map，但这个Map不是我们平时使用的Map，而是ThreadLocalMap，ThreadLocalMap是ThreadLocal的一个内部类，不对外使用的。当使用ThreadLocal存值时，首先是获取到当前线程对象，然后获取到当前线程本地变量Map，最后将当前使用的ThreadLocal和传入的值放到Map中，也就是说ThreadLocalMap中存的值是[ThreadLocal对象, 存放的值]，这样做的好处是，每个线程都对应一个本地变量的Map，所以一个线程可以存在多个线程本地变量。


- sleep和wait分别是那个类的方法，有什么区别 
     - sleep和wait sleep是Thread类的方法  wait是Object类的方法 
     - 区别 
           - sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态）。 
           - wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。 
 
- Synchronized与Lock的区别
     - （用法）synchronized(隐式锁)：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。 
     - （用法）lock（显示锁）：需要显示指定起始位置和终止位置。一般使用ReentrantLock类做为锁，多个线程中必须要使用一个ReentrantLock类做为对 象才能保证锁的生效。且在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。 
    
     - （性能）synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。在Java1.5中，synchronize是性能低效的。因为 这是一个重量级操作，需要调用操作接口，导致有可能加锁消耗的系统时间比加锁以外的操作还多。相比之下使用Java提供的Lock对象，性能更高一些。但 是到了Java1.6，发生了变化。synchronize在语义上很清晰，可以进行很多优化，有适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。导致 在Java1.6上synchronize的性能并不比Lock差。 
     - （机制）synchronized原始采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就 是CAS操作（Compare and Swap）。 
     - 目前来看 synchronized可以是对象锁(非静态methond, 一个变量/对象, synchronized(this))， 也可以是类锁(synchronized(this.class)或者在static method上面加synchronized), 而lock接口下似乎都是对象锁， (ReetranLock:排它锁， ReadWriteLock:读写锁) 

- Java中synchronized是无法被中断的， lock的tryLock是尝试获取锁， 如果拿不到锁不会等到会立即返回true or false.  而lock的lockInterruptibly()方法是可以响应中断的。 具体参考[here](http://www.cnblogs.com/DarrenChan/p/6528578.html

- cookie和session的区别 
    - session 在服务器端，cookie 在客户端（浏览器） 
    - session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id） 
    - session 可以放在 文件、数据库、或内存中都可以。用户验证这种场合一般会用 session 
    - cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗  考虑到安全应当使用session。 
    - session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用COOKIE。 
    - 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie

- Volatile关键字详解
    - [详解](http://www.cnblogs.com/zhengbin/p/5654805.html)
    - [这个详解很赞](http://www.cnblogs.com/lucky_dai/p/5505222.html)
    - 简单来说: volatile保证并发环境下修改的立即可见性， 因为java的多线程内存模型是类似于多核的cache模型， 每个线程都会有自己的工作内存。
然后对于一个变量而言，修改完之后只是会将修改反应到工作内存，所以可能会造成数据不一致的问题。 java提供了volatile这个关键字， 他的做法在于，如果某个线程修改了某个值，会写入工作内存与内存，而且会导致所有的线程中的工作内存的这个变量的缓存行失效。 所以其他线程发现失效之后， 就会去内存读取最新的值。
    - 然而， volatile并不能保证原子性， 比如i++就不是一个原子操作。 所以要想保证数据高的一致性，建议还是用Lock或者synchronized关键字， 所以volatile 也可以看成是一个弱的同步机制。 
    - 而且volatile消除了指令重排(多线程环境下可能会导致数据不一致), 当然lock/synchronized绝壁是可以保证的。

- Yield  参考[here](http://dylanxu.iteye.com/blog/1322066)
    - sleep()
	使当前线程（即调用该方法的线程）暂停执行一段时间，让其他线程有机会继续执行，但它并不释放对象锁。也就是说如果有synchronized同步快，其他线程仍然不能访问共享数据。注意该方法要捕捉异常。
	例如有两个线程同时执行(没有synchronized)一个线程优先级为MAX_PRIORITY，另一个为MIN_PRIORITY，如果没有Sleep()方法，只有高优先级的线程执行完毕后，低优先级的线程才能够执行；但是高优先级的线程sleep(500)后，低优先级就有机会执行了。
	总之，sleep()可以使低优先级的线程得到执行的机会，当然也可以让同优先级、高优先级的线程有执行的机会。

    - join()
	join()方法使调用该方法的线程在此之前执行完毕，也就是等待该方法的线程执行完毕后再往下继续执行。注意该方法也需要捕捉异常。
 
    - yield()
	该方法与sleep()类似，只是不能由用户指定暂停多长时间，并且yield（）方法只能让同优先级的线程有执行的机会。

- Java中abstract与interface的区别
    - 首先abstarct类是一个类，java单继承，所以只能继承一个抽象类， 然而可以继承多接口
    - abstract类中可以有非abstract的方法。 然而interface不行，实际上interface上的所有方法都是可以看做是abstract的。而且定义数据成员也必须是static final的。
    - 具体check [here](http://www.cnblogs.com/beanmoon/archive/2012/12/06/2805221.html) 


- java线程安全的容器有哪些?
    - HashTable / Vector / ConcurrentHashMap

- Java线程池
    - 其实说到底只有两个雷 ThreadPoolExecutor 和 Scheduled-ThreadPoolExecutor类
    - 当然提供了几个实现的方法（可以看做是简化版， newSingleThreadExecutor, newCachedThreadPool, newFixedThreadPool, newScheduleThreadPool

- Java常用设计模式
    - 单例模式
    - 工厂模式
    - [适配器模式](http://blog.csdn.net/jason0539/article/details/22468457)
    - Builder模式

## 网络相关
- GET和POST的区别？ 
    - GET 被强制服务器支持 
    - 浏览器对URL的长度有限制，所以GET请求不能代替POST请求发送大量数据 
    - GET请求发送数据更小 
    - GET请求是不安全的， 容易被sql注入啊。。之类的。。 
    - POST请求不能被缓存 
    - 在以下情况中，请使用 POST 请求： 
         - 1. 无法使用缓存文件（更新服务器上的文件或数据库） 
         - 2. 向服务器发送大量数据（POST 没有数据量限制） 
         - 3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠 
         - 4. post比Get安全性更高 

- TCP和UDP区别？如何改进TCP 
     - TCP和UDP区别 
          - UDP 是无连接的，即发送数据之前不需要建立连接。 TCP 是面向连接的运输层协议。  
          - UDP 使用尽最大努力交付，即不保证可靠交付，同时也不使用拥塞控制。 
          - UDP 是面向报文的。UDP 没有拥塞控制，很适合多媒体通信的要求。TCP是面向字节流。  
          - UDP 支持一对一、一对多、多对一和多对多的交互通信。 每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。  
          - UDP 的首部开销小8个字节。 TCP首20个字节。
	  - TCP 提供可靠交付的服务。 
 
      - TCP加快传输效率的方法 
	  - 采取一块确认的机制 

- TCP发送窗口
     - 发送窗口受两点控制 min(滑动窗口， 拥塞窗口)
     - 滑动窗口大小

- [TCP连接](http://blog.csdn.net/whuslei/article/details/6667471/)
    - 三次握手过程
    - (1)A发送syn=1 X (2)B发送syn=1 Y, ack X+1,且开始分配资源 (3)A发送syn=0 X+1, ack Y+1，分配资源
    - 三次握手的原因是: 如果两次握手， A发给B之后，B收到了然后发了ACK，但是丢包了。 B会误以为连接已经建立，会发包给A，A因为没收到ACK不会处理， 所以B会盲等A。。   
   
    - 四次挥手的过程
    - 首先，断开的一方可以是client，也可以是server.
    - 假设client发出中断连接的FIN报文， 那么server需要发一个ACK给client,但是server此时可以继续发送数据。 client收到ack之后就进入FIN_WAIT的状态。 当server传输完数据，向client发FIN，client收到报文之后，知道可以关闭连接了，然而还是不相信网络啊，所以继续发送ack给server，进入了Time_wait状态，如果server没收到client ack，那么可以重传。 server收到ack之后关闭，然后client等待2MSL没有回复正常关闭。
    - 四次握手原因很简单， 因为client 与 server 是可以分别单独进行关闭， 而每一次正常关闭都需要来回ack. 比如四次握手的后两次连接， server发给client ack之后，如果client不发ack之后， server就关闭， 那么如果这个ack丢包了。。那么client就会一直在等server的ack告诉他需要关闭， 然而server已经关闭了， 所以就会盲等， 而四次握手中server需要继续等client的ack，所以即使之前丢包了， server也可以继续重发。

    - [TCP可靠传输的一些机制](http://www.cnblogs.com/deliver/p/5471231.html)
    - [TCP滑动窗口协议](http)

- 常用应用层协议
    - 基于TCP的有: FTP 21(控制连接)(数据连接是20)   SSH 22   telnet 23  SMTP 25    POP3 110   HTTP 80
    - 基于UDP的有: TFTP  DHCP   NTP  SNMP
    - 基于UDP与TCP的有: DNS ECHO

